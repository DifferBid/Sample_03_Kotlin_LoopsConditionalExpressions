
package org.example

    fun main() {

        /**-----Example 01-----*/
        // Создаем диапазон целых чисел от 1 до 5 включительно с помощью оператора ..
        val oneToFive = 1..5
        // Выводим на консоль класс объекта oneToFive.
        // Здесь будет выведено "class kotlin.ranges.IntRange", что означает, что oneToFive имеет тип IntRange
        // В Kotlin синтаксис :: называется референцией на члены или референцией на функции (function reference).
        // Этот синтаксис используется для получения ссылки на члены класса (методы или свойства) или функции.
        // В примере с oneToFive::class.java, ::class используется для получения референции на объект класса KClass,
        // который представляет собой класс типа oneToFive. А свойство java используется для получения Java-класса (Class<*>) соответствующего этому KClass.
        // Таким образом, выражение oneToFive::class.java возвращает объект Class<*>, который представляет собой информацию о классе объекта oneToFive на уровне Java.
        // В данном случае это будет kotlin.ranges.IntRange, так как oneToFive является объектом этого типа.
        println(oneToFive::class.java) //: class kotlin.ranges.IntRange
        println(oneToFive) // InConsole: 1..5

        // Выражение 1..5 можно заменить
        val oneToFiveAltA = IntRange(1, 5)
        println(oneToFiveAltA) // InConsole: 1..5

        // Выражение 1..5 можно заменить
        val oneToFiveAltB: IntRange = 1.rangeTo(5)
        println(oneToFiveAltB) // InConsole: 1..5

        /**-----Example 02-----*/
        // CharRange Диапазоны символов
        val characters = 'a'.rangeTo('z')
        println(characters) // InConsole: a..z

        /**-----Example 03-----*/
        // Случайное число из диапазона
        val diceRange = 1..6
        val randomNumber = diceRange.random()
        println("Random number: $randomNumber") // InConsole: Random number: 5
        println(diceRange::class) //: class kotlin.ranges.IntRange (Kotlin reflection is not available)

        /**-----Example 04-----*/
        // Тип IntRange и его родственники имеют способности - проходить циклически по всем элементам.

        // Функция isO принимает символ (переменная 'о' ru) и возвращает true,
        // если этот символ находится в диапазоне от 'к' до 'т' (включительно) в нижнем
        // или верхнем регистре. В противном случае возвращается false.

        // Принимает один аргумент c типа Char, который представляет собой символ.
        // Использует оператор in, чтобы проверить, находится ли символ 'о' в диапазоне от 'к' до 'т' в нижнем регистре ('к'..'т') или в верхнем регистре ('К'..'Т').
        // Диапазоны 'к'..'т' и 'К'..'Т' создаются с использованием оператора .., который определяет интервал от начального до конечного символа включительно.
        // Оператор || используется для логического ИЛИ, что означает, что если символ находится в любом из указанных диапазонов, функция вернет true.
        fun isO(o: Char) = o in 'к'..'т' || o in 'К'..'Т'

        // Проверяем символ 'о' на принадлежность к диапазону от 'к' до 'т'.
        // Ожидается, что функция вернет true, так как 'о' находится в этом диапазоне.
        println(isO('о')) // InConsole: true
        // Итог: Этот код можно использовать для проверки принадлежности любого символа к указанным диапазонам,
        // что особенно полезно для верификации ввода или фильтрации символов

        /**-----Example 05-----*/
        // Проверка чисел
        // проверим, входит ли число в заданный диапазон
        val number = 5
        println(number in 1..100) // InConsole: true

        /**-----Example 06-----*/
        // Сокращение кода и улучшение читаемости
        // Интервалы позволяют упростить конструкции кода
        // Много кода
        val i = 6
        if (i >= 0 && i <= 10) {
            println(i) // InConsole: 6
        }

        // Меньше кода
        if (i in 0..10) {
            println(i) // InConsole: 6
        }

        /**-----Example 07-----*/
        // Специальные случаи

        // Обратные диапазоны — с помощью downTo можно создать диапазон, который идет от большего значения к меньшему
        val descendingRange = 10 downTo 1
        // Шаг интервала — с помощью step можно задать шаг
        val evenNumbers = 2..10 step 2
    }

